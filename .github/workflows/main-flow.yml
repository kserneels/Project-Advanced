name: Build and deliver containers

on: push

jobs:
  productservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver car-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./car-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/car-service:latest ./car-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/car-service:latest

  inventoryservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver customer-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./customer-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/customer-service:latest ./customer-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/customer-service:latest

  orderservice:
    runs-on: ubuntu-latest
    name: Java 17 build, test, deliver carhire-service container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: maven
          distribution: adopt

      - name: Build, test and package project
        working-directory: ./carhire-service
        run: mvn package -B

      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USER }}/carhire-service:latest ./carhire-service

      - name: Upload container to Docker Hub with Push
        run: docker push ${{ secrets.DOCKER_USER }}/carhire-service:latest

services:
  mongo-cars:
    image: mongo:latest
    ports:
      - 27017:27017
    volumes:
      - mongodb_car_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  mysql-carhire:
    image: mysql:latest
    ports:
      - 3308:3306
    volumes:
      - mysql_carhire_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: abc123
      MYSQL_DATABASE: carhire_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      retries: 5
      interval: 30s
      start_period: 60s
      timeout: 5s

  mysql-customer:
    image: mysql:latest
    ports:
      - 3307:3306
    volumes:
      - mysql_customer_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: abc123
      MYSQL_DATABASE: customer_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      retries: 5
      interval: 30s
      start_period: 60s
      timeout: 5s

  car-service:
    depends_on:
      - mongo-cars
    image: KenzoS/car-service
    ports:
      - 8080:8080
    environment:
      MONGODB_PORT: 27017
      MONGODB_HOST: mongo-cars
    networks:
      - app-network

  customer-service:
    depends_on:
      mysql-customer:
        condition: service_healthy
    image: KenzoS/customer-service
    ports:
      - 8082:8082
    environment:
      MYSQL_DB_USERNAME: user
      MYSQL_DB_PASSWORD: password
      MYSQL_DB_HOST: mysql-customer
      MYSQL_DB_PORT: 3307
    networks:
      - app-network

  carhire-service:
    depends_on:
      mysql-carhire:
        condition: service_healthy
      customer-service:
        condition: service_healthy
    image: KenzoS/carhire-service
    ports:
      - 8081:8081
    environment:
      MYSQL_DB_USERNAME: user
      MYSQL_DB_PASSWORD: password
      MYSQL_DB_HOST: mysql-carhire
      MYSQL_DB_PORT: 3306
      PRODUCT_SERVICE_BASEURL: car-service:8080
      INVENTORY_INFO_SERVICE_BASEURL: customer-service:8082
    networks:
      - app-network

volumes:
  mongodb_car_data:
  mysql_customer_data:
  mysql_carhire_data:

networks:
  app-network:
    driver: bridge
